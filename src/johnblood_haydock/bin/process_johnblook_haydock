#! /usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use Encode qw(encode decode from_to);
use File::Slurp;
# use Symbol qw( gensym );
use IPC::Run3;
use YAML::Safe;

my $input_encoding = 'iso-8859-1';
$input_encoding = 'cp-1252';

my $dir = './downloaded';
my $out_dir = './out';
my $bookmap_file = './etc/bookmap.yaml';
my $bookmap = YAML::Safe::LoadFile($bookmap_file);

#my $lines = get_lines ("$dir/id143.html");

my $book={};

for my $part (qw( OT NT )) {
    my $index_file = "$dir/${part}_index.html";
    my $content = read_html_file($index_file);
    $content =~ s{<a }{\n<a }gi;

    for my $line (split(/\n/, $content)) {
        if ($line =~ m{<strong>(\d+)</strong}) {
            #print "PSA: $1 -- $line\n";
            $line =~ s{&nbsp;}{};
            if ($line =~ m{<a href="(id\d+\.html)"><strong>(\d+)</strong>\s*\[([\d& ab]+)\]?\s*</a>}) {
                my ($file, $chap_num, $alt_num) = ($1,$2,$3);
                # TODO: HERE
            } else {
                die "Bad Psalm chap line: $line\n";
            }
        } elsif ($line =~ m{<strong>([^<]+)</strong}) {
            my $name = $1;
            $name =~ s{&nbsp;}{}ig;
            $name =~ s{, alias.+}{}ig;
            $name =~ s{1PETER}{1 PETER}ig;
            $name =~ s{ of }{ OF }ig;
            $name =~ s/\s*$//g;
            next if $name =~ /^\d+$/;
            next if $name =~ /Haydock/;
            next if $name =~ /TESTAMENT$/;

            if (defined($book->{book_id})) {
                write_book_file();
            }
            my $book_id = $bookmap->{$name}
                || die "No ID for book $name\n";

            print "IN: $book_id  ($name)\n";
            $book->{book_id} = $book_id;
            $book->{book_name} = $name;

        } elsif ($line =~ /<a /i) {
            #print "$line\n";
            if ($line =~ m{<a class="NavBar" }) {
                #print "NAVBAR: $line\n";
            } elsif ($line =~ m{<a href="(id\d+\.html)">([^<]+)</a>}) {
                my ($file, $anchor) = ($1, $2);
                next if $anchor eq ']'; # Second entry for psalm 108
                if ($anchor eq 'Introduction') {
                    store_book_intro($file);
                } elsif ($anchor =~ /(\d+)/) {
                    store_chapter($file, $anchor);
                } else {
                    next if $line =~ /Preface/;
                    next if $line =~ /THE OLD TESTAMENT/;
                    next if $line =~ /Transcriber's Notes/;
                    print ">>> $anchor <<< $line\n";
                }
            } else {
                #print "??? $line\n";
            }
        }
    }
}
write_book_file() if defined($book->{book_id});

exit;

sub store_chapter {
    my ($file, $chapter_num, $alt_num) = @_;
    my %seen = ();
    my $state = '';


    #return if $chapter_num > 1;
    print "    C: $chapter_num $file - \n";
    $book->{chapter}->[$chapter_num] = {};
    my $chap = \$book->{chapter}->[$chapter_num];
    my $chap_tag = "$book->{book_id}:$chapter_num";

    if (defined($book->{last_chapter})) {
        die "Chapter Hopping\n" if $chapter_num != ($book->{last_chapter} + 1);
        $book->{last_chapter}++;
    } else {
        die "First chapter isn't #1\n" if $chapter_num != 1;
        $book->{last_chapter} = 1;
    }

    print YAML::Safe::Dump($book) if $book->{book_id} eq 'DAN';
    my $contents = read_html_file("$dir/$file");
    my @lines = split(/\n/, $contents);
    my $last_vers=0;
    for my $line (@lines) {
        next if $line =~ /Previous Chapter/;
        $line =~ s{</strong><strong>}{}ig;
        if ($line =~ m{<title>\s*(.+)\s*</title>}) {
            my $title = $1;
            $title =~ s{\.$}{};
            $title =~ s{ III$}{ 3};
            if ($title =~ m{^([A-Z0-4\. ]+) - Chapter (\d+)$}) {
                my ($tmp_title, $tmp_num) = ($1,$2);
                my $tmp_full_title = $book->{book_title};
                $tmp_full_title =~ s/ FIRST / 1 /g;
                $tmp_full_title =~ s/ SECOND / 2 /g;
                $tmp_full_title =~ s/ THIRD / 3 /g;
                $tmp_full_title =~ s/ FOURTH / 4 /g;
                $tmp_full_title =~ s/ BOOK OF / /g;
                $tmp_full_title =~ s/ OF / /g;

                $tmp_full_title =~ s/^THE //;
                $tmp_full_title =~ tr/,//d;
                $tmp_full_title =~ s/ EPISTLE OF ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PETER / PETER /;
                $tmp_full_title =~ s/ EPISTLE ST. JOHN / JOHN /;

 
                $tmp_full_title =~ s/\.$//;
                $tmp_full_title =~ s/ THE APOSTLE TO THE / /;
                $tmp_full_title =~ s/ THE APOSTLE TO / /;

        

                $tmp_title =~ s/ OF / /g;

                $tmp_num = 35 if $file =~ 'id981.html' && $chapter_num == 35;
                $tmp_num =  8 if $file =~ 'id1038.html' && $chapter_num == 8;
                $tmp_num = 24 if $file =~ 'id1117.html' && $chapter_num == 24;
                $tmp_num =  3 if $file =~ 'id1129.html' && $chapter_num == 3;
                $tmp_num =  5 if $file =~ 'id715.html' && $chapter_num == 5;

                my %good_combos = (
                    "1 CORINTHIANS / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO THE CORINTHIANS." => 1,
                    "2 CORINTHIANS / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO THE CORINTHIANS." => 1,
                    '1 THESSALONIANS / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO THE THESSALONIANS.' => 1,
                    '2 THESSALONIANS / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO THE THESSALONIANS.' => 1,
                    '1 TIMOTHY / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO TIMOTHY.' => 1,
                    '2 TIMOTHY / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO TIMOTHY.' => 1,
                );

                my $tmp_combo = "$tmp_title / $tmp_full_title";

                if (!$good_combos{$tmp_combo}) {
                    die "Title missmatch: '$tmp_combo'\n" if $tmp_full_title !~ m{$tmp_title};
                }
                die "Chap Num missmatch: $tmp_num != $chapter_num\n" if $tmp_num != $chapter_num;
            } else {
                die "        $title\n";
            }


        }
        #print "| $line\n";

        #print "COM: $line\n" if $line =~ m{Commentary};


        if ($state eq 'in_commentary') {
            #print "        IN_C: $line\n";
            if ($line =~ m{Bible Text.+Cross-references:}i || $line =~ m{Bible Text.+Commentary:}i) {
                #print "IS_T: $line\n";
                $seen{"text_and_ref"}++; 
                $state = "in_text";
            }
            if ($line =~ m{<p>(.*)</p>}) {
                my $text = $1;
                $text =~ s/^\s+//;
                $text =~ s/\s+$//;

                next if $text =~ m{<!--"''"-->};
                next unless $text =~ /\S/;
                $text =~ s{<span [^>]+>}{}ig;
                $text =~ s{</span>}{}ig;

                $text =~ s{^<strong>([Ver\. \d]+)</strong>}{$1};
                $text =~ s{^<b>([Ver\. \d\[\]\-\?]+)</b>}{$1};

                $text =~ s{^Ver\.(\S)}{Ver. $1};
                $text =~ s{^Ver\s}{Ver. };

                if ($text =~ s{^Ver\. ([\d\[\]\-\.\? ]+) }{}) {
                    my($ver) = ($1);
                    my $range = '';
                    my $was = '';

                    if ($ver =~ /^(\d+)\.?\s*$/) {
                        $ver = $1;
                    } elsif ($ver =~ m/^(\d+)\.?\s*-+\s*(\d+)\.*$/) {
                        ($ver, $range) = ($1, $2);
                    } elsif ($ver =~ m/^(\d+)\.? ?\[(\d+)\.?\??]\.?$/) {
                        ($ver, $was) = ($1,$2);
                    } else {
                        print "        VER?: $ver\n";
                    }

                    if ($book->{book_id} ne 'EPH' && $ver < ($last_vers)) {  ## TODO: Handle eq/Dup verse labels
                        die "        HOP: $chap_tag ($file)  $ver < ($last_vers + 1)\n";
                    } else {
                        if ($ver > ($last_vers + 1)) {
                            my $range = ($last_vers + 1);
                            $range .= "-". ($ver - 1) if $range != ($ver - 1);
                            #print "        SKIP: $chap_tag ($file)  $range\n";
                        }
                        if ($$chap->{commentary}->{verse}->[$ver]) {
                            die "        $chap_tag ($file) DUP ver=$ver \n"
                              . YAML::Safe::Dump($book) ."\n"
                              . "$line\n";
                        }

                        add_commentary($chap, $chap_tag, $ver, $range, $text);

                        # if ($$chap->{commentary}->{verse}->[$ver]) {
                        #     #$$chap->[$ver] = '<JOIN_2>';
                        #     append_commentary($chap, $ver, $text);
                        # } else {
                        #     # $$chap->[$ver] = "$chap_tag:$ver | $ver";
                        #     # $$chap->[$ver] .= "-$range" if $range;
                        #     # $$chap->[$ver] .= " | ";
                        #     add_commentary($chap, $chap_tag, $ver, $range, $text);
                        # }
                        #$$chap->[$ver] .= $text;
                    }
                    $last_vers = $ver;



                } else {
                    next if $text =~ m{<strong>Bible Text & Cross-references:</strong>};
                    next if $text =~ m{<strong>Bible Text and Cross-references:</strong>};
                    next unless $text =~ /\S/;
                    my $inst = 0;
                    if ($text !~ /^Vera putant/ && $text =~ /^ver/i) {
                        #print "        VER: $text\n";
                        if (defined($$chap->[$last_vers]) && $$chap->[$last_vers] ne '') {
                            append_commentary($chap, $chap_tag, $last_vers, $text);
                            # $$chap->{comentary}->{verse}->[$last_vers]->[$inst] .= '<JOIN>';
                            # $$chap->{comentary}->{verse}->[$last_vers]->[$inst] .= $text;
                            #print "        $chap_tag ($file) JOIN\n";
                        } else {
                            die "        $chap_tag ($file) ANTI-DUP\n";
                        }
                    } else {
                        #print "        JOIN: $chap_tag:$last_vers ($file) $text\n";
                        append_commentary($chap, $chap_tag, $last_vers, $text);
                    }
                }
                # $last_vers = $ver;


            }
        } elsif ($state eq 'in_text') {
            #print "IN_T: $line\n";
        } elsif ($line =~ m{Notes?.+&.+Commen[ta]{1,3}ry}) {
            #print "        $line\n";
            #print "IS_C: $line\n";
            $seen{"notes_and_commentary"}++;
            $state = "in_commentary";
        }
    }

    die "No Notes and Commentary\n" unless $seen{notes_and_commentary};
    die "Multiple Notes and Commentary\n" if $seen{notes_and_commentary} != 1;
    die "No Text and Ref\n" unless $seen{text_and_ref};
    die "Multiple Text and Ref\n" if $seen{text_and_ref} != 1;
    #exit;

}

sub add_commentary {
    my ($chap, $chap_tag, $ver, $range, $text) = @_;
    my $index = sprintf("v:%03d", $ver);
    my $tag =  $ver;
    if ($range eq 'title') {
        $tag = 'Title';
    } elsif ($range eq 'preface') {
        $tag = 'Preface';
    } elsif ($range eq 'chapter') {
        $tag = '';
    } elsif ($range eq 'etc') {
        $tag = "1, &c";
    } elsif ($range) {
        $tag .= "-$range";
    }

    if (!defined($$chap->{commentary}->{$index})) {
        $$chap->{commentary}->{$index} = [];
    }

    my @tmp = @{$$chap->{commentary}->{$index}};
    my $inst = $#tmp + 1;

    $text =~ s{^\s+}{};
    $text =~ s{\s+$}{};

    $$chap->{commentary}->{$index}->[$inst] = "${chap_tag}:$ver | $ver | $tag | $text";

}

sub append_commentary {
    my ($chap, $chap_tag, $ver, $text) = @_;
    my $index = sprintf("v:%03d", $ver);

    #print "INDEX: $index\n". Dumper($$chap);
    #print Dumper($$chap->{commentary}->{$index});
    if ($text =~ s{^\[?<b>\[?Title\.?\]?</b>\]?\s*}{}) {
        #print "TITLE\n";
        add_commentary($chap, $chap_tag, 0, 'title', $text);
        return;
    } elsif ($text =~ s{^\[?<b>\[?Preface\.?\]?</b>\]?\s*}{}) {
        #print "PREFACE\n";
        add_commentary($chap, $chap_tag, 0, 'preface', $text);
        return;
    } elsif ($ver == 0 && (grep(/^$chap_tag$/, qw( DAG:13 MAT:26 1CO:11 1CO:13 1CO:14 1CO:15 2CO:10 REV:18 REV:21 )))) {
        #print "CHAPTER\n";
        add_commentary($chap, $chap_tag, 0, 'chapter', $text);
        return;
    #} elsif (($chap_tag eq 'JHN:8' || $chap_tag eq 'JHN:10' || $chap_tag eq 'ROM:11' || $chap_tag eq 'ROM:15') && $ver == 0) {
    } elsif ($ver == 0 && (grep(/^$chap_tag$/,qw( JHN:8 JHN:10 ROM:11 ROM:15 1CO:9 GAL:1 )))) {
        #print "ETC\n";
        $text =~ s{^<b>Ver. 1, &c.</b>}{};
        $text =~ s{^<b>Ver. 1. &c.</b>}{};

        add_commentary($chap, $chap_tag, 0, 'etc', $text);
        return;
    }
    my @tmp = @{$$chap->{commentary}->{$index}};
    my $inst = $#tmp;

    $$chap->{commentary}->{$index}->[$inst] .= "<JOIN>$text";
}

sub store_book_intro {
    my ($file) = @_;
    my $contents = read_html_file("$dir/$file");
    my @lines = split(/\n/, $contents);
    my %seen = ();
    $book->{book_title} = 'THE PROPHECY OF DANIEL.' if $file eq 'id309.html';
    $book->{book_title} = 'THE PROPHECY OF NAHUM.' if $file eq 'id489.html';
    $book->{book_title} = 'THE PROPHECY OF HABACUC.' if $file eq 'id560.html';

    for my $line (@lines) {
        if ($line =~ m{>([1234A-Z\. ]+) - Introduction}) {
            my $name = $1;
            $name =~ s/^ST. //;
            #print "I        PC: $line\n";
            if ($name ne $book->{book_name}) {
                die "Book Name mismatch: '$name' != '$book->{book_name}'\n";
            }
        } elsif ($line =~ /<p align="center">/) {
            $line =~ s{<strong>}{<b>}gi;
            $line =~ s{</strong>}{</b>}gi;
            # $line =~ s{<em>}{}gi;
            # $line =~ s{</em>}{}gi;

            #print "P        PC: $line\n";

            if ($line =~ m{<p align="center"><b>(.+)</b>}) {
                my $text = $1;
                next if $text =~ m/Haydock's Catholic Bible Commentary/;
                next if $text =~ m/Next Chapter/;
                next if $text =~ m/>_*$<\/p>/;
                $text = 'ISAIAS' if $file eq 'id1220.html' && $text =~ m/ON THE PROPHETS\./;
                $text =~ s{&nbsp;}{}ig;
                $book->{book_title} .= ' ' if $book->{book_title};
                $book->{book_title} .= $text;
                $book->{book_title} =~ s{^(ST. MATTHEW) - INTRODUCTION (.+)}{$2};
            } elsif ($line =~ m{<p align="center"><em>(.+)</em>}) {
                push(@{$book->{intro}}, $1);
            } else {
                1;#print "CENTER-P: $line\n";
            }
        } elsif ($line =~ m{<p align="left">(.+)</p>}) {
            push(@{$book->{intro}}, $1);
        } elsif ($line =~ m{<p>(.+)</p>}) {
            my $text = $1;
            $text =~ s{&nbsp; <!--"''"-->}{};
            $text =~ s{^\s*&nbsp;\s*$}{};
            next unless $text =~ /\S/;

            if ($book->{book_name} eq 'ISAIAS' && !$seen{"ISAIAS_INRO_-_ON_THE_PROPHETS"}) {
                write_file("$out_dir/on_the_prophets.html_body", {binmode=>':utf8'}, $text);
                $seen{"ISAIAS_INRO_-_ON_THE_PROPHETS"}++;
            } else {
                push(@{$book->{intro}}, $text);
            }
        }
    }
    #exit;
}


sub write_book_file {
    my $book_id = $book->{book_id};
    my $file = "$out_dir/${book_id}.yaml";
    print "    Writing: $file\n";
    YAML::Safe::DumpFile($file, $book);
    $book = {};
}


sub make_utf8 {
    my ($content) = @_;
    #$content = encode($content,':encoding(UTF-8)');
    from_to($content, $input_encoding, "UTF-8");
    $content;
}

sub tidy {
    my ($content) = @_;
    my $out = '';
    my $err = 'HI';
    my @cmd = ('tidy', '-w', '0', '-q');

    run3 (\@cmd, \$content, \$out, \$err)
       || die "Error running `tidy`: $?  / $!\n";
    if ($? == 0) {
        die "ERROR: $err\n$?, Stopped ";
    }
    return($out);
}


sub read_html_file {
    my ($file) = @_;

    my $content = read_file($file, {binmode=>":raw"});
    $content = make_utf8($content);
    $content = tidy($content);
    $content =~ s{<font [^>]+>}{}ig;
    $content =~ s{</font>}{}ig;
    $content =~ s{<p style="[^"]+">}{<p>}ig;
    $content =~ s{&amp;}{&}ig;
    $content =~ s{&nbsp;}{ }ig;

    if ($file =~ m{id1109.html$}) {
        $content =~ s{<strong>Bible Text & Cross-references:</strong>}{<strong>Notes & Commentary:</strong}i;
    }

    $content;
}
