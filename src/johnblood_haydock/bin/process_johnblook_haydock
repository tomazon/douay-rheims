#! /usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use Encode qw(encode decode from_to);
use File::Slurp;
use File::stat;
use HTML::Entities;
use IPC::Run3;
use POSIX qw(strftime);
use utf8;
use YAML::Safe;

# binmode(STDOUT, ":utf8");
# binmode(STDIN, ":utf8");

my $input_encoding = 'iso-8859-1';
$input_encoding = 'cp-1252';

my $dir = './downloaded';
my $out_dir = './out';
my $bookmap_file = './etc/bookmap.yaml';
my $bookmap = YAML::Safe::LoadFile($bookmap_file);
my $blockquote_level = 0;



my $book={};

for my $part (qw( NT OT )) {
    my $index_file = "$dir/${part}_index.html";
    my $content = read_html_file($index_file);

    $content =~ s{<a }{\n<a }gi;

    for my $line (split(/\n/, $content)) {
        #print "LINE: $line\n";
        if ($line =~ m{<strong>(\d+)</strong}) {
            #print "PSA: $1 -- $line\n";
            $line =~ s{&nbsp;}{};
            if ($line =~ m{<a href="(id\d+\.html)"><strong>(\d+)</strong>\s*\[([\d& ab]+)\]?\s*</a>}) {
                my ($file, $chap_num, $alt_num) = ($1,$2,$3);
                # TODO: HERE
                print "WWW: $file, $chap_num, $alt_num\n";
                store_chapter($file, $chap_num, $alt_num);
            } else {
                die "Bad Psalm chap line: $line\n";
            }
        } elsif ($line =~ m{<strong>([^<]+)</strong}) {
            my $name = $1;
            $name =~ s{&nbsp;}{}ig;
            $name =~ s{, alias.+}{}ig;
            $name =~ s{1PETER}{1 PETER}ig;
            $name =~ s{ of }{ OF }ig;
            $name =~ s/\s*$//g;
            next if $name =~ /^\d+$/;
            next if $name =~ /Haydock/;
            next if $name =~ /TESTAMENT$/;

            if (defined($book->{book_id})) {
                write_book_file();
            }
            my $book_id = $bookmap->{$name}
                || die "No ID for book $name\n";

            print "IN: $book_id  ($name)\n";
            $book->{book_id} = $book_id;
            $book->{book_name} = $name;

        } elsif ($line =~ /<a /i) {
            print "???: $line\n";
            #next; ## TMP
            if ($line =~ m{<a class="NavBar" }) {
                #print "NAVBAR: $line\n";
            } elsif ($line =~ m{<a href="(id\d+\.html)">([^<]+)</a>}) {
                print "XXX: $line\n";
                my ($file, $anchor) = ($1, $2);
                next if $anchor eq ']'; # Second entry for psalm 108
                if ($anchor eq 'Introduction') {
                    store_book_intro($file);
                } elsif ($anchor =~ /(\d+)/) {
                    store_chapter($file, $anchor);
                } else {
                    next if $line =~ /Preface/;
                    next if $line =~ /THE OLD TESTAMENT/;
                    next if $line =~ /Transcriber's Notes/;
                    print ">>> $anchor <<< $line\n";
                }
            } else {
                #print "??? $line\n";
            }
        }
    }
}
write_book_file() if defined($book->{book_id});

exit;

sub store_chapter {
    my ($file, $chapter_num, $alt_num) = @_;
    my %seen = ();
    my $state = '';

    my $chap_o_num = sprintf("%03d", $chapter_num);

    print "    C: $chapter_num $file - \n";

    $book->{chapter}->[$chapter_num] = {};
    ##$book->{chapter}->{chapter_source_file} = $file;
    my $chap = \$book->{chapter}->[$chapter_num];
    my $chap_tag = "$book->{book_id}:$chapter_num";

    if (defined($book->{last_chapter})) {
        die "Chapter Hopping\n" if $chapter_num != ($book->{last_chapter} + 1);
        $book->{last_chapter}++;
    } else {
        die "First chapter isn't #1\n" if $chapter_num != 1;
        $book->{last_chapter} = 1;
    }

    $book->{provenance}->{"chapter:$chap_o_num"} = gen_provenance($dir, $file);

    my $contents = read_html_file("$dir/$file");
    my @lines = split(/\n/, $contents);
    my $last_vers=0;
    for my $line (@lines) {
        next if $line =~ /Previous Chapter/;
        $blockquote_level++ if $line =~ /<BLOCKQUOTE>/i;
        $blockquote_level-- if $line =~ /<\/BLOCKQUOTE>/i;

        $line =~ s{</strong><strong>}{}ig;
        if ($line =~ m{<title>\s*(.+)\s*</title>}) {
            my $title = $1;
            $title =~ s{\.$}{};
            $title =~ s{ III$}{ 3};
            if ($title =~ m{^([A-Z0-4\. ]+) - Chapter (\d+)$}) {
                print "TIT:1: $title\n";
                my ($tmp_title, $tmp_num) = ($1,$2);
                print "TIT:2: |$tmp_title|$tmp_num|\n";
                my $tmp_full_title = $book->{book_title};
                print "TIT:3: $tmp_full_title\n";
                $tmp_full_title =~ s/ FIRST / 1 /g;
                $tmp_full_title =~ s/ SECOND / 2 /g;
                $tmp_full_title =~ s/ THIRD / 3 /g;
                $tmp_full_title =~ s/ FOURTH / 4 /g;
                $tmp_full_title =~ s/ BOOK OF / /g;
                $tmp_full_title =~ s/ OF / /g;

                $tmp_full_title =~ s/^THE //;
                $tmp_full_title =~ tr/,//d;
                $tmp_full_title =~ s/ EPISTLE OF ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PAUL / /;
                $tmp_full_title =~ s/ EPISTLE ST. PETER / PETER /;
                $tmp_full_title =~ s/ EPISTLE ST. JOHN / JOHN /;

                $tmp_full_title =~ s/\.$//;
                $tmp_full_title =~ s/ THE APOSTLE TO THE / /;
                $tmp_full_title =~ s/ THE APOSTLE TO / /;

                $tmp_title =~ s/ OF / /g;

                $tmp_num = 35 if $file =~ 'id981.html' && $chapter_num == 35;
                $tmp_num =  8 if $file =~ 'id1038.html' && $chapter_num == 8;
                $tmp_num = 24 if $file =~ 'id1117.html' && $chapter_num == 24;
                $tmp_num =  3 if $file =~ 'id1129.html' && $chapter_num == 3;
                $tmp_num =  5 if $file =~ 'id715.html' && $chapter_num == 5;

                my %good_combos = (
                    "1 CORINTHIANS / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO THE CORINTHIANS." => 1,
                    "2 CORINTHIANS / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO THE CORINTHIANS." => 1,
                    '1 THESSALONIANS / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO THE THESSALONIANS.' => 1,
                    '2 THESSALONIANS / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO THE THESSALONIANS.' => 1,
                    '1 TIMOTHY / THE 1 EPISTLE ST. PAUL, THE APOSTLE, TO TIMOTHY.' => 1,
                    '2 TIMOTHY / THE 2 EPISTLE ST. PAUL, THE APOSTLE, TO TIMOTHY.' => 1,
                );

                my $tmp_combo = "$tmp_title / $tmp_full_title";

                if (!$good_combos{$tmp_combo}) {
                    die "Title missmatch: '$tmp_combo'\n" if $tmp_full_title !~ m{$tmp_title};
                }
                die "Chap Num missmatch: $tmp_num != $chapter_num\n" if $tmp_num != $chapter_num;
            } elsif ($title =~ /^Psalm (\d+)$/) {
                my $tmp = $1;
                die "$file: $chap_tag -- Psalm num mismatch: $tmp != $chapter_num.\n" if $tmp != $chapter_num;
                #print "        ::: Chap: $chapter_num\n";
            } else {
                die "Title in $file: $title\n";
            }


        }
        #print "| $line\n";

        #print "COM: $line\n" if $line =~ m{Commentary};


        if ($state eq 'in_commentary') {
            #print "        IN_C: $line\n";
            if ($line =~ m{Bible Text.+Cross-references:}i || $line =~ m{Bible Text.+Commentary:}i) {
                #print "IS_T: $line\n";
                $seen{"text_and_ref"}++;
                $state = "in_text";
            }
            if ($line =~ m{<p>(.*)</p>}) {
                my $text = $1;
                $text =~ s/^\s+//;
                $text =~ s/\s+$//;

                next if $text =~ m{<!--["' ]+-->};
                next unless $text =~ /\S/;
                $text =~ s{<span [^>]+>}{}ig;
                $text =~ s{</span>}{}ig;

                $text =~ s{^<strong>([Ver\. \d]+)</strong>}{$1};
                $text =~ s{^<b>([Ver\. \d\[\]\-\?]+)</b>}{$1};

                $text =~ s{^Ver\.(\S)}{Ver. $1};
                $text =~ s{^Ver\s}{Ver. };
                $text =~ s{<b[^>]*>\s*</b>}{}g;

                if ($book->{book_id} eq 'PSA') {
                    $text =~ s{^\[Ver\.?\s+(\d+)\.\]\s+}{Ver. $1. }i;
                    if ($text =~ s/^Ver. (\d+)\. ([A-Z<"])/$2/) {
                        my $ver = $1;
                        add_item('commentary', $chap, $chap_tag, $ver, "", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/<b[^>]*>Ver. (\d+)\.? \[?or (\d+)\.\]?<\/b>//i) {
                        my $ver = $1;
                        add_item('commentary', $chap, $chap_tag, $ver, "", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/<strong>\[?Ver. (\d+)\.? or \[?(\d+)\\]?\.\]?<\/strong>//i) {
                        my $ver = $1;
                        add_item('commentary', $chap, $chap_tag, $ver, "", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/^\[?Ver. (\d+)-(\d+)\.?\]? ([A-Z<"])/$3/) {
                        my ($ver,$range) = ($1,$2);
                        add_item('commentary', $chap, $chap_tag, $ver, "$ver-$range", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/^<b>Ver\. (\d+), (\d+)\.<\/b>//) {
                        my ($ver,$range) = ($1,$2);
                        add_item('commentary', $chap, $chap_tag, $ver, "$ver,$range", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/^<strong>Ver\. (\d+)\. or (\d+)\.<\/strong>//) {
                        my ($ver,$range) = ($1,$2);
                        add_item('commentary', $chap, $chap_tag, $ver, "$ver or $range", $text);
                        $last_vers = $ver;
                    } elsif ($text =~ s/^<strong>\[Ver\. (\d+)\.\]<\/strong>//) {
                        my ($ver) = ($1);
                        add_item('commentary', $chap, $chap_tag, $ver, "", $text);
                        $last_vers = $ver;
                    } elsif ($chap_tag eq 'PSA:2' && $text =~ /^This psalm has no title/){
                        add_item('commentary', $chap, $chap_tag, 0, "", $text);
                        $last_vers = 0;
                    } elsif ($chap_tag eq 'PSA:3' && $text =~ /^Hebrew and Septuagint have literally/){
                        add_item('commentary', $chap, $chap_tag, 0, "", $text);
                        $last_vers = 0;
                    } elsif ($chap_tag eq 'PSA:46' && $text =~ /^This psalm appears to be a sequel/){
                        add_item('commentary', $chap, $chap_tag, 0, "", $text);
                        $last_vers = 0;
                    } else {
                        $text =~ s/^\s+//;
                        append_item('commentary', $chap, $chap_tag, $last_vers, $text);
                    }
                } elsif ($text =~ s{^Ver\. ([\d\[\]\-\.\? ]+) }{}) {
                    my $ver = $1;
                    my $range = '';
                    my $was = '';

                    if ($ver =~ /^(\d+)\.?\s*$/) {
                        $ver = $1;
                    } elsif ($ver =~ m/^(\d+)\.?\s*-+\s*(\d+)\.*$/) {
                        ($ver, $range) = ($1, $2);
                    } elsif ($ver =~ m/^(\d+)\.? ?\[(\d+)\.?\??]\.?$/) {
                        ($ver, $was) = ($1,$2);
                    } else {
                        print "        VER?: $ver\n";
                    }

                    if ($book->{book_id} ne 'EPH' && $ver < ($last_vers)) {  ## TODO: Handle eq/Dup verse labels
                        die "        HOP: $chap_tag ($file)  $ver < ($last_vers + 1)\n";
                    } else {
                        if ($ver > ($last_vers + 1)) {
                            my $range = ($last_vers + 1);
                            $range .= "-". ($ver - 1) if $range != ($ver - 1);
                            #print "        SKIP: $chap_tag ($file)  $range\n";
                        }
                        if ($$chap->{commentary}->{verse}->[$ver]) {
                            die "        $chap_tag ($file) DUP ver=$ver \n"
                              . YAML::Safe::Dump($book) ."\n"
                              . "$line\n";
                        }

                        add_item('commentary', $chap, $chap_tag, $ver, $range, $text);
                    }
                    $last_vers = $ver;
                } else {
                    next if $text =~ m{<strong>Bible Text & Cross-references:</strong>};
                    next if $text =~ m{<strong>Bible Text and Cross-references:</strong>};
                    next unless $text =~ /\S/;
                    my $inst = 0;
                    if ($text !~ /^Vera putant/ && $text =~ /^ver/i) {
                        #print "        VER: $text\n";
                        if (defined($$chap->[$last_vers]) && $$chap->[$last_vers] ne '') {
                            append_item('commentary', $chap, $chap_tag, $last_vers, $text);
                        } else {
                            die "        $chap_tag ($file) ANTI-DUP\n";
                        }
                    } else {
                        append_item('commentary', $chap, $chap_tag, $last_vers, $text);
                    }
                }
                # $last_vers = $ver;


            }
        } elsif ($state eq 'in_text') {
            #print "IN_T: $line\n";
        } elsif ($line =~ m{Notes?.+&.+Commen[ta]{1,3}ry}) {
            #print "        $line\n";
            #print "IS_C: $line\n";
            $seen{"notes_and_commentary"}++;
            $state = "in_commentary";
        } elsif ($line =~ m{Notes? and Commen[ta]{1,3}ry}) {
            #print "        $line\n";
            #print "IS_C: $line\n";
            $seen{"notes_and_commentary"}++;
            $state = "in_commentary";
        }
    }

    die "No Notes and Commentary\n" unless $seen{notes_and_commentary};
    die "Multiple Notes and Commentary\n" if $seen{notes_and_commentary} != 1;
    die "No Text and Ref\n" unless $seen{text_and_ref};
    die "Multiple Text and Ref\n" if $seen{text_and_ref} != 1;
    #exit;

}

sub add_item {
    my ($section, $chap, $chap_tag, $ver, $range, $text) = @_;
    my $index = sprintf("v:%03d", $ver);
    my $tag =  $ver;
    $blockquote_level=0;
    if ($section eq 'commentary') {
        if ($range eq 'title') {
            $tag = 'Title';
        } elsif ($range eq 'preface') {
            $tag = 'Preface';
        } elsif ($range eq 'chapter') {
            $tag = '';
        } elsif ($range eq 'etc') {
            $tag = "1, &c";
        } elsif ($range) {
            $tag .= "-$range";
        }
    }
    $text =~ s/^\s+//;


    #print "HAHA_ADD: ".join('|', @_)."\n";

    if (!defined($$chap->{$section}->{$index})) {
        $$chap->{$section}->{$index} = [];
    }

    my @tmp = @{$$chap->{$section}->{$index}};
    my $inst = $#tmp + 1;

    $text =~ s{^\s+}{};
    $text =~ s{\s+$}{};

    $$chap->{$section}->{$index}->[$inst] = "${chap_tag}:$ver | $ver | $tag | $text";

}

sub append_item {
    my ($section, $chap, $chap_tag, $ver, $text) = @_;
    #print "HAHA_APPEND: ".join('|', @_)."\n" if $chap_tag eq 'PSA:17';
    my $index = sprintf("v:%03d", $ver);

    if ($section eq 'commentary') {
        if ($text =~ s/^\[?<b>\[?Title\.?\]?<\/b>\]?\s*//) {
            add_item('commentary', $chap, $chap_tag, 0, 'title', $text);
            return;
        } elsif ($text =~ s/^\[?<b>\[?Preface\.?\]?<\/b>\]?\s*//) {
            add_item('commentary', $chap, $chap_tag, 0, 'preface', $text);
            return;
        } elsif ($ver == 0 && (grep(/^$chap_tag$/, qw( DAG:13 MAT:26 1CO:11 1CO:13 1CO:14 1CO:15 2CO:10 REV:18 REV:21 )))) {
            add_item('commentary', $chap, $chap_tag, 0, 'chapter', $text);
            return;
        } elsif ($ver == 0 && (grep(/^$chap_tag$/,qw( JHN:8 JHN:10 ROM:11 ROM:15 1CO:9 GAL:1 )))) {
            $text =~ s{^<b>Ver. 1, &c.</b>}{};
            $text =~ s{^<b>Ver. 1. &c.</b>}{};

            add_item('commentary', $chap, $chap_tag, 0, 'etc', $text);
            return;
        }
    }

    $text =~ s/^\s+//;

    my @tmp = @{$$chap->{$section}->{$index}};
    my $inst = $#tmp;

    my $bq_tag='';
    $bq_tag = "{BQ:$blockquote_level}" if $blockquote_level;

    $$chap->{$section}->{$index}->[$inst] .= "{JOIN}${bq_tag}$text";
}

sub time2iso {
    my ($time) = @_;

    strftime('%Y-%m-%dT%H:%M:%SZ', gmtime($time));
}

sub file_mtime {
    my ($file) = @_;
    my $st = stat($file) or die "No $file: $!";
    $st->mtime;
}

sub gen_provenance {
    my ($dir, $file) = @_;
    my @out = ();
    my $file_time = time2iso(file_mtime("$dir/$file"));
    my $now_time = time2iso(time());

    push(@out, "$file_time - Downloaded from https://johnblood.gitlab.io/haydock/$file");
    push(@out, "$now_time - Extracted by program $0");

    \@out;
}

sub store_book_intro {
    my ($file) = @_;
    print "    I: $file\n";
    my $contents = read_html_file("$dir/$file");
    my @lines = split(/\n/, $contents);
    my %seen = ();
    $book->{book_title} = 'THE PROPHECY OF DANIEL.' if $file eq 'id309.html';
    $book->{book_title} = 'THE PROPHECY OF NAHUM.' if $file eq 'id489.html';
    $book->{book_title} = 'THE PROPHECY OF HABACUC.' if $file eq 'id560.html';
    $book->{book_title} = 'THE PROPHECY OF ISAIAS.' if $file eq 'id1220.html';

    print $contents if $file =~ /id144.html/;

    $book->{provenance} = {
        'intro' => gen_provenance($dir, $file),
    };

    for my $line (@lines) {
        if ($line =~ m{>([1234A-Z\. ]+) - Introduction}) {
            my $name = $1;
            $name =~ s/^ST. //;
            #print "I        PC: $line\n";
            if ($name ne $book->{book_name}) {
                die "Book Name mismatch: '$name' != '$book->{book_name}'\n";
            }
        } elsif ($line =~ /<p align="center">/) {
            $line =~ s{<strong>}{<b>}gi;
            $line =~ s{</strong>}{</b>}gi;
            # $line =~ s{<em>}{}gi;
            # $line =~ s{</em>}{}gi;

            # print "P        PC: $line\n";

            if ($line =~ m{<p align="center"><b>(.+)</b>}) {
                # print "AAA\n";
                my $text = $1;
                next if $text =~ m/Haydock's Catholic Bible Commentary/;
                next if $text =~ m/Next Chapter/;
                next if $text =~ m/>_*$<\/p>/;
                $text = 'ISAIAS' if $file eq 'id1220.html' && $text =~ m/ON THE PROPHETS\./;
                $text = 'TOBIAS' if $file eq 'id595.html'  && $text =~ m/APOCRYPHA\./;
                $text =~ s{&nbsp;}{}ig;
                $book->{book_title} .= ' ' if $book->{book_title};
                $book->{book_title} .= $text;
                $book->{book_title} =~ s{^(ST. MATTHEW) - INTRODUCTION (.+)}{THE HOLY GOSPEL OF JESUS CHRIST, ACCORDING TO $1.};
                $book->{book_title} =~ s/\. THE EPISTLE OF ST\..*$//;
                $book->{book_title} =~ s/\. ON THE CATHOLIC EPISTLES\..*//; #  if $file eq 'id258.html';
                $book->{book_title} =~ s/^TOBIAS THE/THE/;
                $book->{book_title} =~ s/^EPISTLE OF ST. PAUL/THE EPISTLE OF ST. PAUL/;
                $book->{book_title} =~ s/called the\s+SECOND/called the, SECOND/;
                $book->{book_title} =~ s/ISAIAS. ISAIAS/ISAIAS./;
                $book->{book_title} =~ s/, THE APOSTLE$/, THE APOSTLE./;



            } elsif ($line =~ m{<p align="center"><em>(.+)</em>}) {
                push(@{$book->{intro}}, $1);
            } else {
                1;print "CENTER-P: $line\n";
            }
        } elsif ($line =~ m{<p align="left">(.+)</p>}) {
            push(@{$book->{intro}}, $1);
        } elsif ($line =~ m{<p>(.+)</p>}) {
            my $text = $1;
            $text =~ s{&nbsp; <!--"''"-->}{};
            $text =~ s{^\s*&nbsp;\s*$}{};
            next unless $text =~ /\S/;

            if ($book->{book_name} eq 'ISAIAS' && !$seen{"ISAIAS_INTRO_-_ON_THE_PROPHETS"}) {
                write_file("$out_dir/intro_-_on_the_prophets.html_body", {binmode=>':utf8'}, $text);
                $seen{"ISAIAS_INTRO_-_ON_THE_PROPHETS"}++;
            } elsif ($book->{book_name} eq 'TOBIAS' && !$seen{"TOBIAS_INTRO_-_APOCRYPHA"}) {
                write_file("$out_dir/intro_-_apocrypha.html_body", {binmode=>':utf8'}, $text);
                $seen{"ISAIAS_INTRO_-_APOCRYPHA"}++;
            } elsif ($book->{book_name} eq 'JAMES' && !$seen{"JAMES_INTRO_-_CATHOLIC_EPISTLES"}) {
                write_file("$out_dir/intro_-_catholic_epistles.html_body", {binmode=>':utf8'}, $text);
                $seen{"JAMES_INTRO_-_CATHOLIC_EPISTLES"}++;
            } else {
                push(@{$book->{intro}}, $text);
            }
        }
    }
    #exit;
}


sub write_book_file {
    my $book_id = $book->{book_id};
    my $file = "$out_dir/${book_id}.yaml";
    print "    Writing: $file\n";
    YAML::Safe::DumpFile($file, $book);
    $book = {};
}


sub make_utf8 {
    my ($content, $code_page) = @_;
    #$content = encode($content,':encoding(UTF-8)');
    from_to($content, $code_page, "UTF-8");
    $content;
}

sub tidy {
    my ($mode, $content) = @_;
    my $out = '';
    my $err = 'HI';
    #my @cmd = ('tidy', '-w', '0', '-raw', '-q');
    #my @cmd = ('tidy', '-w', '0', '-q');
    #my @cmd = ('tidy', '-w', '0', '-win1252', '-q');
    my @cmd = ('tidy', '-w', '0', $mode , '-q');

# binmode($content, ":utf8");
# binmode($out, ":utf8");
# binmode($err, ":utf8");

    print "RUNNING: ". join(' ', @cmd) ."\n";

    run3 (\@cmd, \$content, \$out, \$err)
       || die "Error running `tidy`: $?  / $!\n";
    if ($? == 0) {
        die "ERROR: $err\n$?, Stopped ";
    }
    return($out);
}

# sub htmlent_to_charcode {
#     my ($html_ents, $content) = @_;

#     for my $ent (keys %{$html_ents}) {
#         my $code = $html_ents->{$ent};
#         $content =~ s/$ent/$code/g;
#     }
#     $content;
# }

# sub charcode_to_utf8 {
#     my ($html_ents, $content) = @_;

#     for my $ent (keys %{$html_ents}) {
#         my $code = $html_ents->{$ent};
#         my $char = $ent;
#         if ($char =~ s/&#(\d+);/$1/) {
#             $char = chr $char;
#         }
#         $content =~ s/$code/$char/g;
#     }
#     $content;
# }


sub read_html_file {
    my ($file) = @_;
    my $content = '';

    print "    Reading: $file\n";
    # my %html_ents = (
    #     '&#338;'  => '{char:OElig}',
    #     '&#339;'  => '{char:oelig}',
    #     '&#8212;' => '{char:mdash}',
    #     '&#8216;' => '{char:OpenCurlyQuote}',
    #     '&#8217;' => '{char:CloseCurlyQuote}',
    #     '&#8224;' => '{char:dagger}',
    #     '&#8230;' => '{char:mldr}',
    # );

    my %is_a_utf8_file = (
        #'id48.html' => 1,
    );


    if ($is_a_utf8_file{$file}) {
        print "UTF8 File: $file\n";
        $content = read_file($file, {binmode=>":raw"});
        $content = tidy('-utf8', $content);
        $content = make_utf8($content, 'utf-8');
        $content = decode_entities($content);

    } else {
        $content = read_file($file, {binmode=>":raw"});
        $content = tidy('-win1252', $content);
        $content =~ s{&nbsp;}{ }ig;
        $content = make_utf8($content, 'cp-1252');
        $content = decode_entities($content);
    }


    # $content =~ s/&Atilde;&Dot;/&egrave;/ig;
    # $content =~ s/&Atilde;&brvbar;/&aelig;/ig;
    #$content = make_utf8($content);
    #$content = decode_entities($content);

    #$content = tidy($content);
    #$content = htmlent_to_charcode(\%html_ents, $content);
    #$content = make_utf8($content);
    #$content = charcode_to_utf8(\%html_ents, $content);
    #$content = tidy($content);
    #$content = charcode_to_utf8(\%html_ents, $content);


    $content =~ s{ class="c\d+"}{}ig;
    $content =~ s{<span [^>]+>}{}ig;
    $content =~ s{<span>}{}ig;
    $content =~ s{</span>}{}ig;

    $content =~ s{<font [^>]+>}{}ig;
    $content =~ s{</font>}{}ig;
    $content =~ s{<p style="[^"]+">}{<p>}ig;
    $content =~ s{&amp;}{&}ig;
    $content =~ s{&nbsp;}{ }ig;

    $content =~ s{<p }{\n<p }ig;
    $content =~ s{<p>}{\n<p>}ig;
    $content =~ s{</p>}{</p>\n}ig;

    $content =~ s{<b [^>]+>}{<b>}ig;

    $content =~ s{<blockquote [^>]+>}{<BLOCKQUOTE>}ig;
    $content =~ s{<blockquote>}{\n<BLOCKQUOTE>\n}ig;
    $content =~ s{</blockquote>}{\n</BLOCKQUOTE>\n}ig;

    if ($file =~ m{id1109.html$}) {
        $content =~ s{<strong>Bible Text & Cross-references:</strong>}{<strong>Notes & Commentary:</strong}i;
    }

    $content;
}
