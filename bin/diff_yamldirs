#! /usr/bin/env perl

use strict;
use warnings;

use Data::Dumper;
use File::Slurp;
use Getopt::Long;
use String::Diff qw( diff );
use YAML::Safe;
use utf8;

      my $data   = "file.dat";
      my $length = 24;
      my $verbose;

use feature 'say';

binmode *STDOUT, ':utf8';

my $book_order_file = './etc/book_order.yaml';

my $args = {
    do_verses => 1, 
    hilite => 'ansi-colors',
    strip_punc => 1,
    squish => 1,
};

GetOptions (
    "do-verses!"  => sub{$args->{do_verses} = $_[1]},
    "strip-punc!" => sub{$args->{strip_punc} = $_[1]},
    "squish!"     => sub{$args->{squish} = $_[1]},
    "hilite=s"    => sub{$args->{hilite} = $_[1]},
) || die("Error in command line arguments\n");



my $dir_a = shift();
my $dir_b = shift();
#my $book = shift();



my @books = book_list($book_order_file);

for my $book (@books) {
    do_diff ($args, $dir_a, $dir_b, $book);
}


sub book_list {
    my ($book_order_file, @list) = @_;
    my @out = ();

    my $book_order = YAML::Safe::LoadFile($book_order_file);
    for my $sec (qw( OT NT )) {
        for my $id (@{$book_order->{$sec}}) {
            push(@out, $id);
        }
    }

    @out;
}

sub do_diff {
    my ($args, $dir_a, $dir_b, $book) = @_;
    my $errors = '';

    die "No such directory: $dir_a" unless -d $dir_a;
    die "No such directory: $dir_b" unless -d $dir_b;

    my $file_a = "$dir_a/$book.yaml";
    my $file_b = "$dir_b/$book.yaml";

    $errors .= "!!! ". _on_red("No_such_file: $file_a") ."\n" unless -f $file_a;
    $errors .= "!!! ". _on_red("No_such_file: $file_b") ."\n" unless -f $file_b;
    if ($errors) {
        print "$errors";
        return(2);
    }


    my $data_a = YAML::Safe::LoadFile($file_a);
    my $data_b = YAML::Safe::LoadFile($file_b);

    say _header("==========================================================");
    say "@ < $data_a->{book_title}";
    say "@ > $data_b->{book_title}";
    say "";

    for my $c_num (combined_keys($data_a->{chapters}, $data_b->{chapters})) {
        my $c_tag = num_to_tag('c', $book, $c_num);

        my $chap_a = $data_a->{chapters}->{$c_num};
        my $chap_b = $data_b->{chapters}->{$c_num};

        if ($args->{do_verses}) {
            for my $v_num (combined_keys($chap_a->{verses}, $chap_b->{verses})) {
                my $v_tag = num_to_tag('v', $c_tag, $v_num);
                my $vers_a = $chap_a->{verses}->{$v_num};
                my $vers_b = $chap_b->{verses}->{$v_num};

                if (!defined($vers_a) || $vers_a eq '') {
                    say "> $v_tag | ". _on_red("Only in $file_b");
                    next;
                }
                if (!defined($vers_b) || $vers_b eq '') {
                    say"< $v_tag | ". _on_red("Only in $file_a");
                    next;
                }

                my ($tag_a, $ch_a, $dis_a, $text_a) = split(/\s*\|\s*/, $vers_a);
                my ($tag_b, $ch_b, $dis_b, $text_b) = split(/\s*\|\s*/, $vers_b);

                my ($diff_a, $diff_b) = diff_text($args, $v_tag, $text_a, $text_b);
                if ($diff_a || $diff_b) {
                    say "- $v_tag $diff_a" if $diff_a;
                    say "+ $v_tag $diff_b" if $diff_b;
                    say "";
                }

            }
        }
    }
}


sub combined_keys {
    my ($a, $b) = @_;
    my %seen = ();

    for my $key (keys %{$a}) {
        $seen{$key}++;
    }
    for my $key (keys %{$b}) {
        $seen{$key}++;
    }

    sort keys %seen;
}

sub diff_text {
    my ($args, $tag, $text_a, $text_b) = @_;

    $text_a = strip_text($args, $text_a);
    $text_b = strip_text($args, $text_b);

    return("","") if $text_a eq $text_b;

        # remove_open  => color_code('on_red'),
        # remove_close => color_code('reset'),
        # append_open  => color_code('on_green'),
        # append_close => color_code('reset'),

    my $diff = String::Diff::diff(($text_a,$text_b),
        remove_open  => '{REMOVE_OPEN}',
        remove_close => '{REMOVE_CLOSE}',
        append_open  => '{APPEND_OPEN}',
        append_close => '{APPEND_CLOSE}',
    );

    my $diff_a = $diff->[0];
    my $diff_b = $diff->[1];

    if ($args->{squish}) {
        $diff_a = squish_diff($args, $diff_a);
        $diff_b = squish_diff($args, $diff_b);
    }

    if ($args->{hilite} eq 'ansi-colors') {
        $diff_a = ansi_colors_to_diff($diff_a);
        $diff_b = ansi_colors_to_diff($diff_b);
    } elsif ($args->{hilite} eq 'enscript-colors') {
        $diff_a = enscript_colors_to_diff($diff_a);
        $diff_b = enscript_colors_to_diff($diff_b);
    } else {
        die "Unknown --hilite: $args->{hilite}\n";
    }
    return ($diff_a, $diff_b);
}

sub squish_diff {
    my ($args, $text) = @_;

    my $size = 15;
    # $text =~ s/^.+(.{10}\{APPEND_OPEN\})/... $1/g;
    # $text =~ s/(\{APPEND_CLOSE\}.{10})[^\{\}]$/$1 .../g;

    $text =~ s/^[^{}]+([^{}]{$size}\{)/... $1/g;
    $text =~ s/(\}[^{}]{$size})[^{}]+$/$1 .../g;

    $text =~ s/(\}[^{}]{$size})[^{}]+([^{}]{$size}\{)/$1 ... $2/g;

    $text = '' unless $text =~ /\{/;

    $text

}


sub ansi_colors_to_diff {
    my ($text) = @_;

    $text =~ s/{REMOVE_OPEN}/color_code('on_red')/ge;
    $text =~ s/{REMOVE_CLOSE}/color_code('reset')/ge;
    $text =~ s/{APPEND_OPEN}/color_code('on_green')/ge;
    $text =~ s/{APPEND_CLOSE}/color_code('reset')/ge;

    $text
}

sub enscript_colors_to_diff {
    my ($text) = @_;

    $text =~ s/{REMOVE_OPEN}/~bgcolor{1 0.5 0.5}/g;
    $text =~ s/{REMOVE_CLOSE}/~bgcolor{1 1 1}/g;
    $text =~ s/{APPEND_OPEN}/~bgcolor{0.5 1 0.5}/g;
    $text =~ s/{APPEND_CLOSE}/~bgcolor{1 1 1}/g;

    $text
}

sub num_to_tag {
    my ($type, $prefix, $num) = @_;
    $num =~ s/^[vc]:0?// || die "Invalid ${$type}_num: $num\n";

    "$prefix:$num";
}

sub strip_text {
    my ($args, $text) = @_;

    $text =~ s/\{[^}]+}/ /g;
    $text =~ s/\<[^>]+>/ /g;
    #$text =~ s/\s+/ /g;

    if ($args->{strip_punc}) {
        $text =~ s/[\.\,\:\;\-\?\!]+/ /g;
    }

    $text =~ s/\x{2019}/'/g;  # Right Single Quotation Mark

    $text =~ s/\s+/ /g;
    $text =~ s/^\s+//;
    $text =~ s/\s+$//;

    $text;

}

sub color_code {
    my ($color) = @_;

    my %ansi = (
        red          => "\e[0;31m",
        green        => "\e[0;32m",
        yellow       => "\e[0;33m",
        blue         => "\e[0;34m",
        bright_red   => "\e[1;31m",
        bright_green => "\e[1;32m",
        on_red       => "\e[1;41m",
        on_green     => "\e[1;42m",
        on_yellow    => "\e[1;43m",
        reset        => "\e[0m",
    );

    my %enscript = (
        red          => '~color{1 0.5 0.5}',
        green        => "~color{0.5 1 0.5}",
        on_red       => '~bgcolor{1 0.5 0.5}',
        on_green     => "~bgcolor{0.5 1 0.5}",
        on_yellow    => "~bgcolor{1 1 0.5}",
        reset        => "~bgcolor{1 1 1}~color{0 0 0}",
    );

    $ansi{header}     = $ansi{yellow};
    $enscript{header} = $enscript{on_yellow};

    if ($args->{hilite} eq 'ansi-colors') {
        return $ansi{$color};
    } elsif ($args->{hilite} eq 'enscript-colors') {
        return $enscript{$color};
    } else {
        die "Unknown --hilite: $args->{hilite}\n";
    }

    $ansi{$color};
}

sub _color   {color_code($_[0]) . $_[1] . color_code('reset')}
sub _red     {_color('red', $_[0])}
sub _green   {_color('green', $_[0])}
sub _yellow  {_color('yellow', $_[0])}
sub _blue    {_color('blue', $_[0])}

sub _on_red     {_color('on_red', $_[0])}
sub _on_yellow  {_color('on_yellow', $_[0])}
sub _header     {_color('header', $_[0])}

sub color {
    my ($color, $text) = @_;

    if ($args->{hilite} eq 'ansi-colors') {
        return("ANSI: $text");
    } elsif ($args->{hilite} eq 'ansi-colors') {
        return("ENSCRIPT $text");
    }
}
